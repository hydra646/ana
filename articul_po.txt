#include <stdio.h>
#define MAX 100
int time = 0;
void dfs(int u, int parent, int disc[], int low[], int visited[], int isArticulation[], int graph[MAX][MAX], int V) {
    visited[u] = 1;
    disc[u] = low[u] = ++time;
    int children = 0;
    for (int v = 0; v < V; v++) {
        if (graph[u][v]) {
            if (!visited[v]) {
                children++;
                dfs(v, u, disc, low, visited, isArticulation, graph, V);
                if (low[v] < low[u]) low[u] = low[v];
                if (parent != -1 && low[v] >= disc[u]) {
                    isArticulation[u] = 1;
                }
            } else if (v != parent) {
                if (disc[v] < low[u]) low[u] = disc[v];
            }
        }
    }
    if (parent == -1 && children > 1) {
        isArticulation[u] = 1;
    }
}
void findArticulationPoints(int graph[MAX][MAX], int V) {
    int disc[MAX], low[MAX];
    int visited[MAX] = {0};
    int isArticulation[MAX] = {0};
    for (int i = 0; i < V; i++) {
        disc[i] = low[i] = -1;
    }
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            dfs(i, -1, disc, low, visited, isArticulation, graph, V);
        }
    }
    printf("Articulation Points: ");
    for (int i = 0; i < V; i++) {
        if (isArticulation[i]) {
            printf("%d ", i);
        }
    }
    printf("\n");
}
int main() {
    int V, E;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &V, &E);
    int graph[MAX][MAX] = {0};
    printf("Enter the edges (u v):\n");
    for (int i = 0; i < E; i++) {
        int u, v;
        scanf("%d %d", &u, &v);
        graph[u][v] = 1;
        graph[v][u] = 1;
    }
    findArticulationPoints(graph, V);
    return 0;
}