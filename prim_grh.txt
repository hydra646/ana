#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define MAX 100  // Maximum number of vertices

// Function to find the vertex with the minimum key value that is not yet included in MST
int findMinVertex(int key[], bool mstSet[], int n) {
    int min = INT_MAX, minIndex;
    for (int v = 0; v < n; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }
    return minIndex;
}

// Function to implement Prim's Algorithm
void primsAlgorithm(int n, int graph[MAX][MAX]) {
    int parent[MAX];  // Array to store constructed MST
    int key[MAX];     // Key values to pick minimum weight edge
    bool mstSet[MAX]; // To represent the set of vertices included in MST

    // Initialize all keys as infinite and MST set as false
    for (int i = 0; i < n; i++) {
        key[i] = INT_MAX;
        mstSet[i] = false;
    }

    key[0] = 0;     // Start from the first vertex
    parent[0] = -1; // First node is always the root of MST

    // The MST will have n-1 edges
    for (int count = 0; count < n - 1; count++) {
        // Pick the minimum key vertex not yet included in MST
        int u = findMinVertex(key, mstSet, n);
        mstSet[u] = true; // Add the picked vertex to MST

        // Update key value and parent index of the adjacent vertices
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }

    // Print the MST
    printf("\nMinimum Spanning Tree (MST) Edges:\n");
    int totalWeight = 0;
    for (int i = 1; i < n; i++) {
        printf("%d - %d, Weight: %d\n", parent[i], i, graph[i][parent[i]]);
        totalWeight += graph[i][parent[i]];
    }
    printf("Total Weight of MST: %d\n", totalWeight);
}

int main() {
    int n;
    int graph[MAX][MAX];

    // User input for number of vertices
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    // User input for adjacency matrix
    printf("Enter the adjacency matrix (%d x %d):\n", n, n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Run Prim's Algorithm
    primsAlgorithm(n, graph);

    return 0;
}
